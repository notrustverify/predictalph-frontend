/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as PredictPriceContractJson } from "../price/PredictPrice.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace PredictPriceTypes {
  export type Fields = {
    punterTemplateId: HexString;
    roundTemplateId: HexString;
    title: HexString;
    epoch: bigint;
    operator: Address;
    feesBasisPts: bigint;
    repeatEvery: bigint;
    claimedByAnyoneDelay: bigint;
    playerCounter: bigint;
  };

  export type State = ContractState<Fields>;

  export type BetEvent = ContractEvent<{
    contractId: HexString;
    from: Address;
    epoch: bigint;
    amount: bigint;
    up: boolean;
    claimedByAnyoneTimestamp: bigint;
  }>;
  export type RoundEndedEvent = ContractEvent<{
    contractId: HexString;
    epoch: bigint;
    price: bigint;
  }>;
  export type RoundStartedEvent = ContractEvent<{
    contractId: HexString;
    epoch: bigint;
    price: bigint;
  }>;
  export type ClaimedEvent = ContractEvent<{
    contractId: HexString;
    punterAddress: Address;
    from: Address;
    amount: bigint;
    epoch: bigint;
  }>;

  export interface CallMethodTable {
    getArrayElem: {
      params: CallContractParams<{ array: HexString; index: bigint }>;
      result: CallContractResult<HexString>;
    };
    getTitle: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  PredictPriceInstance,
  PredictPriceTypes.Fields
> {
  encodeFields(fields: PredictPriceTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as PredictPriceTypes.Fields;
  }

  eventIndex = { Bet: 0, RoundEnded: 1, RoundStarted: 2, Claimed: 3 };
  consts = {
    ErrorCodes: {
      PunterNotExists: BigInt(1),
      InvalidPunterAddress: BigInt(2),
      InvalidCaller: BigInt(3),
      BidTimestampReached: BigInt(4),
      RoundAlreadyRunning: BigInt(5),
      RoundDidntEnd: BigInt(6),
      RoundNotExists: BigInt(7),
      AlreadyPlayed: BigInt(8),
      NotEnoughAlph: BigInt(9),
      CannotBeClaimedYet: BigInt(10),
      NotAllPlayerClaimed: BigInt(11),
    },
    SubContractTypes: { Round: "00", Punter: "01" },
  };

  at(address: string): PredictPriceInstance {
    return new PredictPriceInstance(address);
  }

  tests = {
    getArrayElem: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { array: HexString; index: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getArrayElem", params);
    },
    getRoundByEpoch: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { epochToGet: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getRoundByEpoch", params);
    },
    getRoundByEpochByteVec: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { epochToGet: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getRoundByEpochByteVec", params);
    },
    getBetInfoByEpoch: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { from: Address; epochToGet: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getBetInfoByEpoch", params);
    },
    getTitle: async (
      params: Omit<
        TestContractParamsWithoutMaps<PredictPriceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getTitle", params);
    },
    startRound: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { from: Address; price: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "startRound", params);
    },
    endRound: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { actualPrice: bigint; immediatelyStart: boolean }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "endRound", params);
    },
    bid: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { amount: bigint; up: boolean }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "bid", params);
    },
    withdraw: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { from: Address; arrayEpochIn: HexString; addressToClaim: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdraw", params);
    },
    destroyRound: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { epochArray: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroyRound", params);
    },
    destroy: async (
      params: Omit<
        TestContractParamsWithoutMaps<PredictPriceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroy", params);
    },
    boostRound: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { amount: bigint; epochToBoost: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "boostRound", params);
    },
    setNewRepeatEvery: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { newRecurrence: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setNewRepeatEvery", params);
    },
    setNewFees: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { basisPts: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setNewFees", params);
    },
    setNewOperator: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { newOperator: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setNewOperator", params);
    },
    setNewClaimedByAnyone: async (
      params: TestContractParamsWithoutMaps<
        PredictPriceTypes.Fields,
        { newClaimedByAnyoneDelay: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setNewClaimedByAnyone", params);
    },
  };
}

// Use this object to test and deploy the contract
export const PredictPrice = new Factory(
  Contract.fromJson(
    PredictPriceContractJson,
    "=10-2+59=2-1+8=3-1+a=3-1+b=2-2+12=3-1+7=3-1+3=3-1+f=3-1+4=3-1+6=3-1+8=3-1+9=3-1+b=3-1+c=3-1+d=92-1+e=24+7e0212526f756e6420636f6e747261637420696420001601=25-1+d=18+16017e0212526f756e6420636f6e74726163742069642000=1720",
    "5451688e8f61e8a2d83d75d9c29b41a9cd254d71e90b5901d79f838af6572f8b",
    []
  )
);

// Use this class to interact with the blockchain
export class PredictPriceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<PredictPriceTypes.State> {
    return fetchContractState(PredictPrice, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeBetEvent(
    options: EventSubscribeOptions<PredictPriceTypes.BetEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PredictPrice.contract,
      this,
      options,
      "Bet",
      fromCount
    );
  }

  subscribeRoundEndedEvent(
    options: EventSubscribeOptions<PredictPriceTypes.RoundEndedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PredictPrice.contract,
      this,
      options,
      "RoundEnded",
      fromCount
    );
  }

  subscribeRoundStartedEvent(
    options: EventSubscribeOptions<PredictPriceTypes.RoundStartedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PredictPrice.contract,
      this,
      options,
      "RoundStarted",
      fromCount
    );
  }

  subscribeClaimedEvent(
    options: EventSubscribeOptions<PredictPriceTypes.ClaimedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PredictPrice.contract,
      this,
      options,
      "Claimed",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | PredictPriceTypes.BetEvent
      | PredictPriceTypes.RoundEndedEvent
      | PredictPriceTypes.RoundStartedEvent
      | PredictPriceTypes.ClaimedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      PredictPrice.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getArrayElem: async (
      params: PredictPriceTypes.CallMethodParams<"getArrayElem">
    ): Promise<PredictPriceTypes.CallMethodResult<"getArrayElem">> => {
      return callMethod(
        PredictPrice,
        this,
        "getArrayElem",
        params,
        getContractByCodeHash
      );
    },
    getTitle: async (
      params?: PredictPriceTypes.CallMethodParams<"getTitle">
    ): Promise<PredictPriceTypes.CallMethodResult<"getTitle">> => {
      return callMethod(
        PredictPrice,
        this,
        "getTitle",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends PredictPriceTypes.MultiCallParams>(
    calls: Calls
  ): Promise<PredictPriceTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      PredictPrice,
      this,
      calls,
      getContractByCodeHash
    )) as PredictPriceTypes.MultiCallResults<Calls>;
  }
}
